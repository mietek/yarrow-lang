<DL>
  <DT>Description:
  <DD>Pure Type Systems with Subtyping are described in my thesis.
  <DT>Activation:
  <DD>Subtyping is activitated by giving two additional
      parameters to the 'System' command:
      the list of subtyping sorts and the list of subtyping rules.
      For example:<BR>  
      <CODE>System (*,#),(*:#),((*,*),(#,*)),(#),((#,*))</CODE>
      for the second order lambda calculus with subtyping and
      bounded quantification.
  <DT>Syntax:
  <DD>There are two additional constructions:
      <DL COMPACT>
      <DT><CODE>\x &lt;: t : T. e</CODE><DD> for a bounded abstraction. 
      <DT><CODE>@x &lt;: t : T. e</CODE><DD> for a bounded quantification.
      </DL>          
      We use <CODE>\x &lt;: t. e</CODE> as shorthand for
      <CODE>\x &lt;: t : T. e</CODE> if <CODE>t : T</CODE>. This shorthand is
      also available for bounded quantifications.
  <DT>Commands:
  <DD>There are two additional commands available for systems with subtyping.
      <UL>
      <LI><CODE>Check </CODE> <VAR>term</VAR> <CODE>&lt;: </CODE> <VAR>term</VAR>
          checks if the first term is a subtype of the second term.
      <LI><CODE>Var</CODE> <VAR>var-list</VAR> <CODE>&lt;:</CODE>
          <VAR>term</VAR> <CODE>:</CODE> <VAR>term</VAR> declares a bounded
          variable.
      </UL>
      All other commands are adapted to handle subtyping as well.
      For example, <CODE>Type</CODE> gives a minimal type, and 
      <CODE>Intro</CODE> and <CODE>Apply</CODE> work also for bounded
      quantifications.
</DL>



